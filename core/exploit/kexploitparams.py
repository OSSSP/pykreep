import socket

import core.errors
from colorama import Fore
from shell.util import color_str


class KExploitParams:

    def __init__(self):
        self.params = []

    def add_param(self, name, required: bool=True, description: str=None, default_value=None, validator=None):
        if not name:
            raise core.errors.ParameterError('Invalid param name')

        self.params.append({
            'name': name,
            'required': required,
            'description': description,
            'value': default_value,
            'validator': validator
        })

        return self

    def set_param(self, name, value):
        for param in self.params:
            if param['name'].lower() == name.lower():
                param['value'] = value
                break
        else:
            raise core.errors.ParameterError('No such param \'{}\''.format(name))
        return self

    def get_param_value(self, name):
        for param in self.params:
            if param['name'].lower() == name.lower():
                return param['value']
        else:
            raise core.errors.ParameterError('No such param \'{}\''.format(name))

    def validate_param(self, param):
        if param['required'] and param['value'] is None:
            raise core.errors.ParameterError('Parameter \'{}\' is required'.format(param['name']))
        if param['validator'] is not None and not param['validator'](param['value']):
            raise core.errors.ParameterError('Parameter \'{}\' is not valid'.format(param['name']))

    def validate_params(self):
        for param in self.params:
            self.validate_param(param)

    def pretty_print(self):
        print('Parameters available for exploit:')
        pad = ' ' * 4
        for param in self.params:
            print(pad,
                  color_str(str(param['name']), Fore.CYAN) + color_str('*', Fore.RED) if param['required'] else '',
                  '=',
                  str(param['value']),
                  '# ',
                  color_str(str(param['description']), Fore.LIGHTGREEN_EX))

    @staticmethod
    def validator_ipv4(ip):
        try:
            socket.inet_aton(ip)
            return True
        except socket.error:
            return False

    @staticmethod
    def validator_port(port):
        try:
            port = int(port)
            return 0 < port < 65536
        except ValueError:
            return False
