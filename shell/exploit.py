import cmd2

import core.errors
import core.kmoduleloader as loader

from shell.abstract import AbstractShell
from shell.util import print_err


class ExploitShell(AbstractShell):
    prompt = ''
    module = None  # type: 'KExploit'

    def __init__(self, exploit_name):
        super().__init__()
        self.prompt = 'K:' + exploit_name + '>'

        if not exploit_name:
            raise core.errors.InvalidCommandArgumentError('Missing command argument \'name\'')

        self.exploit_name = exploit_name
        mod_loader = loader.KModuleLoader()
        self.module = mod_loader.load_exploit(exploit_name)

    def do_run(self, _):
        try:
            self.module.params.validate_params()
        except core.errors.ParameterError as err:
            print_err(err)
            return

        try:
            self.module.run()
        except Exception as err:
            print_err(err)

    def help_run(self):
        print('Run current exploit')

    @cmd2.options([], arg_desc='<name> <value>\nSets parameter value')
    def do_param(self, args, opts=None):
        if len(args) != 2:
            print_err('param <name> <value>\nRun \'params\' to to view all parameters')

    def do_params(self, _):
        self.module.params.pretty_print()

    def help_params(self):
        print('Shows available parameters and values for exploit')

    def do_back(self, p):
        return True

    def emptyline(self):
        pass

#    def do_EOF(self, line):
#        return True

    def postloop(self):
        print()
